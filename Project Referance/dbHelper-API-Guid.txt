1) setTable($tableName)
	-	parameter as table name
	-	to set table for select query
	-	return table alias like t0, t1 etc.
2)	setColumns($t0, $userCol)
	-	parameter 1) table alias from setTable() return value
	-	parameter 2) table columns as array - associative array for setting column alias like user_name as salesman etc.
	-	to select columns from table (table alias)
	-	return true
3)	setWhere($where, $t0, $like)
	-	parameter 1) associative array having column name as key & column value as value
	-	parameter 2) table alias return value of setTable();
	-	parameter 3) set true for LIKE '%%' statement
	-	to set `WHERE` clause
	-	return true
4)	setGroupBy($groupBy)
	-	parameter - array/associative array having column names
	-	to set `GROUP BY` clause
	-	return true
5)	setOrderBy($orderBy)
	-	parameter - associative array having column names as key & value as asc or desc
	-	to set `ORDER BY` clause
	-	return true
6)	setLimit(array(1,10))
	-	parameter - array having two values 1) select record form 2) no of records
	-	to select limited data default selecting 1st record & select 10 records at a time
	-	return true
7)	setJoinString("LEFT JOIN", "users", array("user_id"=>$t0.".id"))
	-	parameter 1) join type (string) - supported type - LEFT JOIN, INNER JOIN, JOIN, RIGHT JOIN
	-	parameter 2) join table name (string)
	-	parameter 3) associative array - key as column name of current table & value as column name of parent table with [tableAlias.columnName]
	-	this method prepare join statement with parent table & current table
	-	return current table alias like t1, t2, t3 etc.
8)	select()
	-	this is used to get data from table or joined table
	-	return query result(rows) as array having table data as associative array
9)	selectSingle()
	-	this is used to get single record from table or joined table
	-	return query result as associative array
10) insert($table, $inputData)
	-	parameter 1) tableName
	-	parameter 2) inputData as JSON object or associative array
	-	this method is used to insert data into database
	-	return last inserted id
11)	update($table, $inputData, $where)
	-	parameter 1) tableName
	-	parameter 2) inputData as JSON object or associative array
	-	parameter 3) associative array having column name & value as key & value
	-	this method is used to update record/s from database
	-	return true

	
Using Stored Function
SELECT @usrId := t1.id as id, (SELECT count(*) from users where user_id = @usrId) as userCount, t1.* from users as t1 where FIND_IN_SET(t1.id, (select GetFamilyTree(id) FROM users where id = 1))

// for child users
DELIMITER $$
DROP FUNCTION IF EXISTS `GetFamilyTree` $$
CREATE FUNCTION `GetFamilyTree`(`GivenId` VARCHAR(50)) RETURNS varchar(1024) CHARSET latin1
    DETERMINISTIC
BEGIN

    DECLARE rv,q,queue,queue_children,queue_names VARCHAR(1024);
    DECLARE queue_length,pos INT;
    DECLARE GivenSSN,front_ssn VARCHAR(64);

    SET rv = '';

    SELECT id INTO GivenSSN
    FROM users
    WHERE id = GivenId;
    IF ISNULL(GivenSSN) THEN
        RETURN ev;
    END IF;

    SET queue = GivenSSN;
    SET queue_length = 1;

    WHILE queue_length > 0 DO
        IF queue_length = 1 THEN
            SET front_ssn = queue;
            SET queue = '';
        ELSE
            SET pos = LOCATE(',',queue);
            SET front_ssn = LEFT(queue,pos - 1);
            SET q = SUBSTR(queue,pos + 1);
            SET queue = q;
        END IF;
        SET queue_length = queue_length - 1;
        SELECT IFNULL(qc,'') INTO queue_children
        FROM
        (
            SELECT GROUP_CONCAT(id) qc FROM users
            WHERE user_id = front_ssn AND group_id <> '1'
        ) A;
        SELECT IFNULL(qc,'') INTO queue_names
        FROM
        (
            SELECT GROUP_CONCAT(id) qc FROM users
            WHERE user_id = front_ssn AND group_id <> '1'
        ) A;
        IF LENGTH(queue_children) = 0 THEN
            IF LENGTH(queue) = 0 THEN
                SET queue_length = 0;
            END IF;
        ELSE
            IF LENGTH(rv) = 0 THEN
                SET rv = queue_names;
            ELSE
                SET rv = CONCAT(rv,',',queue_names);
            END IF;
            IF LENGTH(queue) = 0 THEN
                SET queue = queue_children;
            ELSE
                SET queue = CONCAT(queue,',',queue_children);
            END IF;
            SET queue_length = LENGTH(queue) - LENGTH(REPLACE(queue,',','')) + 1;
        END IF;
    END WHILE;

    RETURN rv;

END $$
DELIMITER ;

// for Parent users
DELIMITER $$
CREATE FUNCTION `GetAncestry`(GivenID INT) RETURNS varchar(1024) CHARSET latin1
    DETERMINISTIC
BEGIN
    DECLARE rv VARCHAR(1024);
    DECLARE cm CHAR(1);
    DECLARE ch INT;

    SET rv = '';
    SET cm = '';
    SET ch = GivenID;
    WHILE ch > 0 DO
        SELECT IFNULL(user_id,-1) INTO ch FROM
        (SELECT user_id FROM users WHERE id = ch) A;
        IF ch > 0 THEN
            SET rv = CONCAT(rv,cm,ch);
            SET cm = ',';
        END IF;
    END WHILE;
    RETURN rv;
END $$
DELIMITER ;

// Get Parent user's Group Name
DELIMITER $$
CREATE FUNCTION `getGroupName`(`groupId` INT(20)) RETURNS varchar(64) CHARSET latin1
    NO SQL
BEGIN
    DECLARE rv VARCHAR(50);
	DECLARE uid INT;
	DECLARE gid INT;
	
	SELECT IFNULL(user_id,-1) INTO uid FROM
    (SELECT user_id FROM users WHERE id = groupId) A;

	

    SELECT IFNULL(group_name,-1) INTO rv FROM
    (SELECT g.group_name FROM `users` as u
left join user_group as g on g.id = u.group_id where u.id = uid) C;
    RETURN rv;



END $$
DELIMITER ;

// Get Parent & grand parent User Name
DELIMITER $$
CREATE DEFINER=`root`@`localhost` FUNCTION `getParentName`(`userId` INT) RETURNS varchar(64) CHARSET latin1
    NO SQL
BEGIN
    DECLARE rv VARCHAR(50);
	DECLARE uid INT;
	DECLARE gid INT;
	
	SELECT IFNULL(user_id,-1) INTO uid FROM
    (SELECT user_id FROM users WHERE id = userId) A;

	

    SELECT IFNULL(name,-1) INTO rv FROM
    (SELECT g.name FROM `users` as u
left join users as g on g.id = u.user_id where u.id = userId) C;
    RETURN rv;
END $$
DELIMITER ;

// get Parent's parent id (admin_id)
DELIMITER $$
CREATE FUNCTION `getParentId`(`userId` INT) RETURNS varchar(64) CHARSET latin1
    NO SQL
BEGIN
    DECLARE rv VARCHAR(50);
	DECLARE uid INT;
	DECLARE gid INT;
	SELECT IFNULL(user_id,-1) INTO uid FROM
    (SELECT user_id FROM users WHERE id = userId) A;
    SELECT IFNULL(id,-1) INTO rv FROM
    (SELECT g.id FROM `users` as u
left join users as g on g.id = u.user_id where u.id = userId) C;
    RETURN rv;
END  $$
DELIMITER ;
